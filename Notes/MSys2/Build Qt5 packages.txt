Build Qt5 packages.txt

pacman-conf --version
pacman-conf --help

pacman-conf -r msys

#CacheDir    = /var/cache/pacman/pkg/
CacheDir    = /c/msys2/pkg

sed --version



# One time build tools installation
pacman -S --asdeps --needed --noconfirm base-devel
# for building mingw32 packages
pacman -S --asdeps --needed --noconfirm mingw-w64-i686-toolchain
# for building mingw64 packages
pacman -S --asdeps --needed --noconfirm mingw-w64-x86_64-toolchain


# Change to qt5 folder and build 64 bit package with log
cd C:/PKGBUILD/mingw-w64-qt5 && MINGW_INSTALLS=mingw64 makepkg-mingw -sLf
# MINGW_INSTALLS=mingw64 makepkg-mingw -RLf # Repackage
#   rm -fr C:/PKGBUILD/mingw-w64-qt5/src/x86_64


# Change to qt5-static package folder and build after installing depends
cd C:/PKGBUILD/mingw-w64-qt5-static && MINGW_INSTALLS=mingw64 makepkg-mingw -sLf

#   rm -fr C:/PKGBUILD/mingw-w64-qt5-static/src/i686
#   rm -fr C:/PKGBUILD/mingw-w64-qt5-static/src/x86_64
#   rm -fr C:/PKGBUILD/mingw-w64-qt5/src/i686



dos2unix 7.3.4-1 (base-devel)


dos2unix add to makedepends for qt5?

https://www.archlinux.org/packages/community/x86_64/calibre/

https://www.archlinux.org/packages/extra/i686/qscintilla-qt5/
qscintilla-qt5 requires ?? qt5-base and qt5-tools

PRE_TARGETDEPS should be used instead of TARGETDEPS for static libs

PRE_TARGETDEPS += ../../qtimageformats/plugins/imageformats/libqicns.a

TARGETDEPS += libfoo.a

FROM https://blog.rburchell.com/2013/10/every-time-you-configordered-kitten-dies.html
TEMPLATE = subdirs
SUBDIRS = src plugins tests docs
plugins.depends = src
tests.depends = src plugins

https://aur.archlinux.org/packages/mingw-w64-qt5-base-static/
https://www.archlinux.org/groups/i686/kf5/

https://wiki.qt.io/Qt_Coding_Style
https://wiki.qt.io/Coding_Conventions

http://code.qt.io/cgit/qt/qt5.git/

https://wiki.qt.io/Building_Qt_5_from_Git

https://wiki.qt.io/Building_a_static_Qt_for_Windows_using_MinGW

$ pkg-config --libs libssl
-LC:/Apps32/MSys2/mingw32/lib -lssl # I believe this is missing stuff for shared linking.

OPENSSL_OPT_WINDLL

$ pkg-config --libs libssl --static
-LC:/Apps32/MSys2/mingw32/lib -lssl -lws2_32 -lgdi32 -lcrypt32 -lcrypto -lws2_32 -lgdi32 -lcrypt32

$ pkg-config --libs --static dbus-1
-LC:/Apps32/MSys2/mingw32/lib -ldbus-1 -lws2_32 -liphlpapi

$ cd qt5
$ git checkout v5.8.0
$ perl init-repository

or

$ git clone https://code.qt.io/qt/qt5.git                     # cloning the repo
$ cd qt5
$ git checkout v5.8.0                                         # checking out the specific release or branch
$ git submodule update --init --recursive                     # updating each submodule to match the supermodule

git ls-remote --tags https://code.qt.io/qt/qt5.git

tar czf ${submodule}.tar.gz ${submodule}  # Create tar file from folder ${submodule}
tar xzf ${submodule}.tar.gz               # Extract tar file

  --skippgpcheck   Do not verify source files with PGP signatures
 
-f, --file=ARCHIVE                use archive file or device ARCHIVE
-z, --gzip, --gunzip, --ungzip    filter the archive through gzip
-x, --extract, --get              extract files from an archive
-c, --create                      create a new archive

-C, --directory=DIR        change to directory DIR
-u, --update               only append files newer than copy in archive


https://github.com/Alexpux/MSYS2-packages/issues/735

https://github.com/Alexpux/MINGW-packages
https://github.com/msys2/msys2/wiki/Creating-packages

pacman -Syu
pacman -S base-devel
# pacman -S --needed base-devel # Seems to NOT work
pacman -S --needed mingw-w64-i686-toolchain
pacman -S --needed git

cd /c/PKGBUILD/mingw-w64-qt5-git
MINGW_INSTALLS=mingw32 makepkg-mingw --nodeps --log --nobuild --noprepare
MINGW_INSTALLS=mingw32 makepkg-mingw --nodeps --log --nobuild           # Test 1st checkout
MINGW_INSTALLS=mingw64 makepkg-mingw --nodeps --log --nobuild

cd /c/PKGBUILD/mingw-w64-qt5-git
# Change build mode to debug and release
MINGW_INSTALLS=mingw32 makepkg-mingw -sLf
MINGW_INSTALLS=mingw64 makepkg-mingw -sLf                               # Test Building
MINGW_INSTALLS=mingw64 makepkg-mingw -Lf --noextract --noprepare --nodeps
MINGW_INSTALLS=mingw64 makepkg-mingw -R -f --nodeps                     # Redo packaging


cd /c/PKGBUILD/mingw-w64-qscintilla
MINGW_INSTALLS=mingw64 makepkg-mingw -sLf 


https://wiki.qt.io/How_to_build_a_static_Qt_version_for_Windows_with_gcc


$ pkg-config --static --libs-only-l dbus-1
-ldbus-1 -lws2_32 -liphlpapi

$ pkg-config --static --libs-only-L dbus-1
-LC:/Apps64/MSys2/mingw64/lib

C:\Apps64\MSys2\mingw64\lib\pkgconfig\dbus-1.pc

QMAKE_LIBS_DBUS C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\mkspecs\qmodule.pri

QT_LIBS_DBUS    C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\configure
                C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\src\dbus\dbus.pro
                C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\src\plugins\platforms\xcb\xcb_qpa_lib.pro
                C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\tests\auto\dbus\qdbusmarshall\qdbusmarshall\qdbusmarshall.pro
                C:\PKGBUILD\mingw-w64-qt5-git\src\x86_64\qtbase\tests\auto\dbus\qdbustype\qdbustype.pro



$ pkg-config --static dbus-1 --cflags
-IC:/Apps64/MSys2/mingw64/include/dbus-1.0 -IC:/Apps64/MSys2/mingw64/lib/dbus-1.0/include


${CARCH}

C:\Apps64\MSys2\mingw64\lib

Checking for libwebp... yes

configure_opts+=("-skip" "qtimageformats")

--single-branch     # Did NOT Help Instead changed depth to higher value
--no-checkout
--quiet, -q         # Operate quietly. Progress is not reported to the standard error stream.

git checkout 5.9.0 && git submodule foreach 'git checkout 5.9.0 || true'

git submodule foreach 'git fetch && git pull'

git submodule foreach 'git fetch && git status -uno'

git submodule foreach 'git rev-parse --abbrev-ref HEAD'

###
# Removed submodules that I do NOT want to use or build
git submodule deinit qtdocgallery
git submodule deinit qtenginio
git submodule deinit qtfeedback
git submodule deinit qtpim
git submodule deinit qtquick1
git submodule deinit qtsystems
#
cd qtqa && rm -fr .git && cd .. && git submodule deinit -f qtqa
cd qtrepotools && rm -fr .git && cd .. && git submodule deinit -f qtrepotools
#
cd qtlocation/src/3rdparty/mapbox-gl-native && rm -fr .git
cd ../../../..
cd qtlocation && git submodule deinit -f src/3rdparty/mapbox-gl-native
####

git checkout 5.9.0 && git submodule update && git status -uno

git checkout 5.9.0 && git reset --hard && git status -uno


0126-qt5-static-qhelpgenerator-sqlite.patch


Branches or Tags to test applying the patch files include:
5.6         Patched OK          5.6.3
5.8         Patched OK          5.8.1
5.9         Patched OK          5.9.1
5.9.0       Patched OK          5.9.0
dev         Patched OK          5.10.0
v5.9.0      Patched OK          5.9.0

Branches/Tags to test that they build and work with cmake-gui include
5.9         Built and installed OK; ToDo test cmake-gui
5.9.0       Built and installed OK; ToDo test cmake-gui
v5.9.0      Built and installed OK; ToDo test cmake-gui


MINGW_INSTALLS=mingw32 makepkg-mingw --log --force

MINGW_INSTALLS=mingw32 makepkg-mingw --syncdeps --noprepare --nobuild

MINGW_INSTALLS=mingw32 makepkg-mingw --log --nobuild

MINGW_INSTALLS=mingw32 makepkg-mingw --log --nodeps --nobuild

echo "length is ${#varname}"

if [ ${#varname} -lt 5 ]; then
  echo "done"
fi

Built and installed

git push --force-with-lease

--no-backup-if-mismatch

https://wiki.qt.io/MSYS2
https://www.archlinux.org/packages/extra/i686/qt5-base/
https://git.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/qt5-base
https://wiki.archlinux.org/index.php/qt

pkgbase=qt5-base
pkgname=(qt5-base qt5-xcb-private-headers)
_qtver=5.8.0
pkgver=${_qtver/-/}
_pkgfqn="${pkgbase/5-/}-opensource-src-${_qtver}"
source=("http://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfqn}.tar.xz"

http://download.qt.io/official_releases/qt/5.7/5.7.1/submodules/
http://download.qt.io/official_releases/qt/5.8/5.8.0/submodules/qtbase-opensource-src-5.8.0.tar.xz

QT_VERSION_MAJOR, QT_VERSION_MINOR, QT_VERSION_PATCH

MODULE_VERSION = 5.7.1 from src\qt5\qtbase\.qmake.conf

local _module_version=$(head -n 34 qtbase/.qmake.conf | grep 'MODULE_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/')

Some of the options
  -R, --repackage  Repackage contents of the package without rebuilding
  -s, --syncdeps   Install missing dependencies with pacman
  -L, --log        Log package build process
  -f, --force      Overwrite existing package
  -o, --nobuild    Download and extract files only
  -p <file>        Use an alternate build script (instead of 'PKGBUILD')
  --nocheck        Do not run the check() function in the PKGBUILD
  --verifysource   Download source files (if needed) and perform integrity checks
  -c, --clean      Clean up work files after build
  -C, --cleanbuild Remove $srcdir/ dir before building the package
  -d, --nodeps     Skip all dependency checks
  -e, --noextract  Do not extract source files (use existing $srcdir/ dir)
  --noprepare      Do not run the prepare() function in the PKGBUILD
  -m, --nocolor    Disable colorized output messages
  --packagelist    Only list packages that would be produced, without PKGEXT
